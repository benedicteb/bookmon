name: Release

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run tests
        run: cargo test

  build:
    name: Build
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: bookmon-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: bookmon-windows.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: bookmon-macos

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/bookmon${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from Cargo.toml
        id: get_version
        run: echo "version=$(grep '^version' Cargo.toml | cut -d '"' -f 2)" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: bookmon-*

      - name: Generate release notes
        id: release_notes
        run: |
          echo "## Changes in v${{ steps.get_version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Commits" >> release_notes.md
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"* %s (%h)" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/bookmon-linux
            artifacts/bookmon-windows.exe
            artifacts/bookmon-macos
          body_path: release_notes.md
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false 
